#!/usr/bin/env bash

m4_include(gu_tools.inc.sh)

usage() {
  printf '%s\n' \
      'gprune @VERSION@' \
      '' \
      'gprune prune and delete remote branches and ' \
      'prune and delete local branches no longer on remote.' \
      '' \
      'Usage: gprune [-h] [-r remote] [-b branch]' \
      '' \
      '    -h         Show this usage' \
      '    -r remote  Name of the remote to delete or prune from.' \
      '    -b branch  Name of branch to delete or prune.'
}

set -e

# defaults
if [ -z "${REMOTE-}" ]; then
  REMOTE=origin
fi

# parse argv variables
while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help) HELP="$"; shift 1;;
    -r|--remote) REMOTE="$2"; shift 2;;
    -b|--branch) BRANCH="$2"; shift 2;;
    -f|-y|--force|--yes) FORCE=1; shift 1;;
    -r=*|--remote=*) REMOTE="${1#*=}"; shift 1;;
    -b=*|--branch=*) BRANCH="${1#*=}"; shift 1;;
    -f=*|-y=*|--force=*|--yes=*) FORCE="${1#*=}"; shift 1;;

    -*) error "Unknown option: $1"; exit 1;;
    *) HELP="$1"; shift 1;;
  esac
done

if [ ! -z "${HELP-}" ]; then
  usage
  exit 0
fi

git fetch --prune
current_branch=$(git branch | grep "*" | sed 's/* //')
if [ "$current_branch" = "${BRANCH}" ]; then
  echo Switching to a different branch
  if branch_avail_on_remote $REMOTE $BRANCH; then
    git checkout development
  else
    git checkout master
  fi
fi

if [ "${BRANCH-}" != "" ]; then
  if branch_avail_on_remote $REMOTE $BRANCH; then
    read -r -p "You are deleting a local \"$BRANCH\" branch and the remote \"$REMOTE/$BRANCH\" branch... Press CTRL-c to cancel or Enter to continue.." -n 1 dummy
    echo
    if asksure; then
      git push $REMOTE --delete $BRANCH
      git branch -D $BRANCH
    fi
  else
    git branch -D $BRANCH
  fi
else
  git branch -D $(git branch -vv | grep ': gone] ' | awk '{print $1}' | xargs)
fi

# vim: set et ts=2 sw=2:
