#!/usr/bin/env bash

m4_include(gu_tools.inc.sh)

usage() {
  printf '%s\n' \
      'gpush @VERSION@' \
      '' \
      'gpush push branch to a remote branch.' \
      '' \
      'Usage: gpush [-h] [-f] [[-b] branch] [-r remote]' \
      '' \
      '    -h      Show this usage.' \
      '    -f      Force pushing to remote.' \
      '    branch: Name of the branch to push.' \
      '    remote: Name of the remote to push into.'
}

set -e

# defaults
if [ -z "${REMOTE-}" ]; then
  REMOTE=origin
fi

# process flags
pointer=1
while [[ $pointer -le $# ]]; do
   if [[ ${!pointer} != "-"* ]]; then ((pointer++)) # not a parameter flag so advance pointer
   else
      param=${!pointer}
      ((pointer_plus = pointer + 1))
      slice_len=1

      case $param in
         # paramter-flags with arguments
         -r|--remote) REMOTE=${!pointer_plus}; ((slice_len++));;
         -b|--branch) BRANCH=${!pointer_plus}; ((slice_len++));;

         # binary flags
         -h|--help) HELP=true;;
         -f|--force) FORCE=true;;
      esac

      # splice out pointer frame from positional list
      [[ $pointer -gt 1 ]] \
         && set -- ${@:1:((pointer - 1))} ${@:((pointer + $slice_len)):$#} \
         || set -- ${@:((pointer + $slice_len)):$#};
   fi
done

if [ ! -z "${HELP-}" ]; then
  usage
  exit 0
fi

if [ -z "${BRANCH-}" ]; then
  BRANCH=$1
fi
if [ -z "${BRANCH-}" ]; then
  BRANCH=${BASED_BRANCH}
fi

if remote_avail ${REMOTE}; then
  if [ ! -z "${FORCE-}" ]; then
    git push -u -f ${REMOTE} ${BRANCH}
  else
    git push -u ${REMOTE} ${BRANCH}
  fi
else
  echo The ${REMOTE} is not available.
fi

# vim: set et ts=2 sw=2:
